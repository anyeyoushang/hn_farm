package model.dao;

import java.util.List;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;

import model.basemodel.BaseLandTree;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class LandTree extends BaseLandTree<LandTree> {
	public static final LandTree dao = new LandTree();
	
	public enum TreeFatEnum{
		未施肥,
		已施肥
	}

	/**
	 * 查询要施肥的果树
	 * @author wh
	 * @since 2016-11-10
	 * @param param
	 */
	public List<LandTree> findRichTree(Object farmId) {
		String sql = "SELECT * FROM t_land_tree WHERE landId IN(SELECT landId FROM t_land WHERE farmId = ?) AND isRich = 0";
		return this.find(sql, farmId);
		
	}

	/**
	 * 查询该农场的果树的最后一次施肥时间或者是最后一次摘取时间
	 * @author wh
	 * @since 2016-11-10
	 * @param object
	 * @return 
	 */
	public List<Record> findFarmTree(Object farmId) {
		String sql = "SELECT * FROM t_land_tree AS tlt LEFT JOIN (SELECT MAX(pickFruitTime) AS pickFruitTime,treeId FROM t_temp_pick GROUP BY treeId)";
		sql += " AS temp ON tlt.landTreeId = temp.treeId WHERE tlt.treeFarmId = ? AND tlt.isRich = 1";
		return Db.find(sql, farmId);
	}

	/**
	 * 每天0点的时候清除施肥的树木
	 * @author wh
	 * @since 2016-11-11
	 */
	public boolean clearFert() {
		try {
			String sql = "SELECT * FROM t_land_tree";
			List<LandTree> landTrees = this.find(sql);
			for(LandTree landTree : landTrees){
				landTree.set("isRich", 0);
				landTree.set("currFruitNum", 0);
				landTree.set("getRichTime", null);
				landTree.update();
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * 删除结够果实的果树
	 * @author wh
	 * @since 2016-11-12
	 * @return
	 */
	public void deleteTree() {
		String sql = "SELECT * FROM t_land_tree WHERE fruitsNum >= 120";
		String sql2 = "SELECT * FROM t_temp_pick WHERE treeId = ?";
		List<LandTree> landTrees = this.find(sql);
		for(LandTree landTree : landTrees){
			System.out.println("删除" + landTree.get("landTreeId") + "号果树成功!");
			// 删除该果树的摘取记录
			for(TempPick tempPick : TempPick.dao.find(sql2, landTree.get("landTreeId"))){
				tempPick.delete();
			}
			landTree.delete();
		}
	}

	/**
	 * 查询被偷人可以被偷的果树
	 * @author wh
	 * @since 2016-11-14
	 * @param steal
	 * @return 
	 */
	public List<LandTree> findFruitTree(String steal) {
		String sql = "SELECT * FROM t_land_tree WHERE treeFarmId = ? AND currFruitNum != 0";
		return this.find(sql, steal);
	}

	/**
	 * 得到该农场的所有的已施肥并且有果实的果树
	 * @author wh
	 * @since 2016-11-15
	 * @param farmId
	 * @return 
	 */
	public List<LandTree> findIncomeTree(String farmId) {
		String sql = "SELECT * FROM t_land_tree WHERE treeFarmId = ? AND isRich = 1 AND currFruitNum > 0";
		return this.find(sql, farmId);
	}
	
		
}
