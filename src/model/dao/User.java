package model.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

import model.basemodel.BaseUser;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class User extends BaseUser<User> {
	public static final User dao = new User();
	// 普通土地推荐人奖励金额
	private double commonReward = 20;
	// 高级土地推荐人奖励金额
	// private double higherReward = 40;
	
	
	public enum FarmTypeEnum{
		普通农场,
		高级农场
	}
	
	public enum FarmAnimalEnum{
		无守护兽,
		有守护兽
	}
	
	/**
	 * 用户登陆
	 * @author wh
	 * @since 2016-11-3
	 * @param paraMap
	 */
	public User login(String userPhoneAndUserName, String passWord, String userRole) {
		String sql = "SELECT * FROM t_user WHERE (realName = ? OR userPhone = ?) AND passWord = ?";
		if(userRole.equals("0")){// 后台登陆有限制
			sql += "  AND userRole = 0";
		}
		
		return this.findFirst(sql, userPhoneAndUserName, userPhoneAndUserName, passWord);
	}
	
	/**
	 * 推荐注册
	 * @author wh
	 * @since 2016-11-3
	 * @param map
	 */
	public User addFarm(Map<String, Object> map) {
		//{idCard=1234567890, referee=1, realName=zhangsan, userPhone=157, passWord=123}
		this.put(map);
		this.set("userId", null);
		this.set("farmType", FarmTypeEnum.普通农场.ordinal());
		this.save();
		return this;
	}

	/**
	 * 用户后台的登陆
	 * @author wh
	 * @param passWord 
	 * @param userPhone 
	 * @since 2016-11-7
	 */
	public void backgroundLogin(String userPhone, String passWord) {
		
	}

	/**
	 * 查询农场的总数
	 * @author wh
	 * @since 2016-11-8
	 */
	public Long findCount() {
		String sql = "SELECT COUNT(userId) AS count FROM t_user";
		return Db.findFirst(sql).get("count");
	}

	/**
	 * 给该直推人添加新农场奖励
	 * @author wh
	 * @since 2016-11-8
	 * @param referee
	 */
	public boolean refereeReward(String referee) {
		User user = this.findById(referee);
		// 该直推人的原有积分
		double farmIntegral = user.get("farmIntegral");
		// 判断该用户是否激活,激活的用户才添加积分
		String sql = "SELECT * FROM t_land WHERE farmId = ?";
		List<Land> lands = Land.dao.find(sql, referee);
		if(lands.size() > 0){
			return user.set("farmIntegral", farmIntegral + commonReward).update();
		}else{
			return false;
		}
		
	}

	/**
	 * 查询三代的用户
	 * @author wh
	 * @since 2016-11-10
	 * @param object
	 * @return 
	 */
	public Map<String, String> findThree(Object paraId) {
		Map<String, String> map = new HashMap<String, String>();
		String sql = "SELECT * FROM t_user WHERE userId = (SELECT refereeId FROM t_user WHERE userId = ?)";
		// 查询第一代
		User user1 = this.findFirst(sql, paraId);
		if(user1 != null){
			map.put("one", user1.get("userId").toString());
			User user2 = this.findFirst(sql, user1.get("userId"));
			if(user2 != null){
				map.put("two", user2.get("userId").toString());
				User user3 = this.findFirst(sql, user2.get("userId"));
				if(user3 != null){
					map.put("three", user3.get("userId").toString());
				}else{
					map.put("three", null);
				}
			}else{
				map.put("two", null);
				map.put("three", null);
			}
		}else{
			map.put("one", null);
			map.put("two", null);
			map.put("three", null);
		}
		return map;
	}

	public List<Record> isActive(String userId) {
		String sql = "SELECT * from  t_land WHERE farmId = ?";
		return Db.find(sql, userId);
	}

	/**
	 * 给该用户的推荐人添加积分
	 * @author wh
	 * @since 2016-11-11
	 * @param object
	 */
	public void addReinte(Object userId) {
		User user = this.findById(userId);
		double farmIntegral = user.getDouble("farmIntegral");
		user.set("farmIntegral", (farmIntegral + commonReward)).update();
	}

	/**
	 * 查询下级 
	 * @author wh
	 * @param refereeId 
	 * @return 
	 * @since 2016-11-11
	 */
	public List<User> downQuery(Object refereeId) {
		String sql = "SELECT * FROM t_user WHERE refereeId = ?";
		return User.dao.find(sql, refereeId);
	}
	
	/**
	 *  查询上级
	 * @author wh
	 * @since 2016-11-14
	 * @param farmId
	 * @return 
	 */
	public User findUp(Object farmId) {
		String sql = "SELECT * FROM t_user WHERE userId = (SELECT refereeId FROM t_user WHERE userId = ?)";
		return this.findFirst(sql, farmId);
	}

	/**
	 * 查询后台显示的数据
	 * @author wh
	 * @since 2016-11-12
	 * @param pageNumber
	 * @param pageSize
	 * @param sql
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public Page getDataList(Integer pageNumber, Integer pageSize, String sql) {
		return paginate(pageNumber, pageSize, sql);
	}

	/**
	 * 用户查询自己的获得积分记录 
	 * @author wh
	 * @since 2016-11-12
	 * @param farmId
	 * @return 
	 */
	public List<Record> findGetIntegralRecord(Object farmId) {
		String sql = "SELECT *,(SELECT userPhone FROM t_user WHERE userId = ?) AS userPhone FROM t_temp_pick AS ttp LEFT JOIN t_land_tree AS tlt ON ttp.treeId = tlt.landTreeId WHERE";
			sql += " tlt.treeFarmid = ? ORDER BY ttp.pickFruitTime DESC,tlt.treeType ASC";
		return Db.find(sql, farmId, farmId);
	}

	

	

	
	
	
	
}
